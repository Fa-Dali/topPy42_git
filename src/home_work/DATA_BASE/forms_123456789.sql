========================================================================
Форма №1
========================================================================
Представь себе шкафчик, куда мы складываем вещи — игрушки, книжки,
одежду и всякое разное. Если положить всё подряд вместе в один ящик,
потом сложно будет разобраться, что где лежит. Чтобы порядок был
хороший, мы начинаем раскладывать всё аккуратно.

Первая Нормальная Форма (НФ) помогает нам разложить наши данные
правильно, так, чтобы было удобно искать и обновлять информацию.
Вот её основное правило:

### Правило №1:
**Каждый столбец таблицы должен содержать одно значение!**

Что это значит?
Допустим, у тебя есть таблица учеников школы, и там записаны
такие строки:

| Имя ученика   | Класс  |
|---------------|--------|
| Петя Иванов   | 7A     |
| Маша Сидорова | 8B, 9C |

Видишь, тут проблема: у Маши два класса сразу указаны. Это неправильно!

По первой нормальной форме нужно исправить таблицу так, чтобы каждый
ученик принадлежал ровно одному классу. То есть, разделить Машины
классы и сделать две отдельные записи:

| Имя ученика   | Класс |
|---------------|-------|
| Петя Иванов   | 7A    |
| Маша Сидорова | 8B    |
| Маша Сидорова | 9C    |

Теперь всё чётко и понятно: каждая строка соответствует одному значению
одного атрибута («Класс»).

Таким образом, **первая нормальная форма запрещает хранить несколько
значений в одном поле**. Всё должно быть отдельно и однозначно.

Это простое правило сильно облегчает жизнь программистам и
администратору базы данных, потому что теперь данные проще обрабатывать
и менять.
========================================================================
Форма №2
========================================================================
Вторая нормальная форма (2НФ) продолжает идею упорядочивания данных,
начатую первой формой, делая базу ещё аккуратнее и удобнее.

Для начала вспомни: первая нормальная форма говорила, что нельзя
смешивать разные значения в одной ячейке таблицы. Теперь посмотрим
глубже и разберём второе важное правило.

### Правило №2:
**Все поля в таблице зависят от всего ключа целиком, а не частично!**

Давай снова представим нашу школьную таблицу, только чуть усложним её:

| Номер класса | Фамилия учителя | Предмет    |
|--------------|-----------------|------------|
| 7A           | Иванова         | История    |
| 7A           | Петров          | Математика |
| 8B           | Сергеев         | Литература |

Здесь ключевое поле — номер класса (`Номер класса`). Но видишь, у
каждого класса несколько учителей, и предмет зависит одновременно от
класса и фамилии учителя.

Но дело вот в чём: фамилия учителя сама по себе не определяет класс,
ведь учитель может вести урок в разных классах. Получается зависимость
частичная, неполная. А это плохо, потому что данные становятся
запутанными и неудобными для обработки.

Чтобы привести такую таблицу ко второй нормальной форме, нужно разбить
её на две отдельные таблицы:

1. Таблица классов:

| Номер класса | Учитель-предмет   |
|--------------|-------------------|
| 7A           | Иванов-История    |
| 7A           | Петров-Математика |
| 8B           | Сергеев-Литература|

2. Вторая таблица должна выглядеть примерно так:

| Учитель-предмет   | Фамилия учителя | Предмет   |
|-------------------|-----------------|-----------|
| Иванов-История    | Иванова         | История   |
| Петров-Математика | Петров          | Математика|
| Сергеев-Литература| Сергеев         | Литература|

Вот теперь у каждой таблицы есть единый ключ, и каждое поле внутри
таблицы полностью зависит именно от своего ключа. Данные стали лучше
организованы, их легче читать и поддерживать.

Итак, главное отличие второй нормальной формы заключается в том, что
она требует зависимости всех полей от полного ключа таблицы, без всяких
частей или зависимостей от отдельных элементов ключа.

========================================================================
Форма №3
========================================================================

Третья нормальная форма (3НФ) идёт дальше и делает структуру наших
таблиц идеальной. Она устраняет лишние зависимости между полями,
которые мешают быстро находить нужные данные.

### Правило №3:
**Никаких избыточных связей между несвязанными полями!**

Представь, что у нас есть такая табличка:

| ФИО сотрудника | Отдел       | Телефон отдела     |
|----------------|-------------|--------------------|
| Анна Смирнова  | Бухгалтерия | +7 (495) 123-45-67 |
| Михаил Кузнецов| Продажи     | +7 (495) 987-65-43 |
| Сергей Павлов  | Бухгалтерия | +7 (495) 123-45-67 |

Тут возникает небольшая проблема: телефон отдела привязан к сотруднику,
хотя он принадлежит отделу, а не человеку. Значит, информация
дублируется — телефоны отделов повторяются много раз. Что же делать?

Правильно поступить так: убрать связь телефона отдела непосредственно
с сотрудником и создать отдельную таблицу для отделов:

#### Первая таблица сотрудников:

| ФИО сотрудника | Отдел       |
|----------------|-------------|
| Анна Смирнова  | Бухгалтерия |
| Михаил Кузнецов| Продажи     |
| Сергей Павлов  | Бухгалтерия |

#### Вторая таблица отделов:

| Название отдела | Телефон отдела     |
|-----------------|--------------------|
| Бухгалтерия     | +7 (495) 123-45-67 |
| Продажи         | +7 (495) 987-65-43 |

Итого: третья нормальная форма устраняет любые зависимости между
данными, которые не относятся напрямую к первичному ключу таблицы.
Таким образом, таблица становится чистой и свободной от ненужных
взаимосвязей.

Итог:
— Каждый столбец зависит только от основного ключа.
— Никаких повторений и лишней связи между несвязанными элементами.

Таким образом, твоя база данных станет лёгкой, понятной и удобной
для работы.

========================================================================
Форма №4
========================================================================

Четвёртая нормальная форма (4НФ) дополняет предыдущие правила, устраняя
особые виды избыточных связей, называемых многозначными зависимостями.

### Представь ситуацию:
У вас есть список фильмов, актёров и жанров кино. Допустим, таблица
выглядит так:

| Фильм       | Актёр               | Жанр              |
|-------------|---------------------|-------------------|
| Матрица     | Киану Ривз          | Научная фантастика|
| Матрица     | Лоуренс Фишберн     | Научная фантастика|
| Интерстеллар| Мэттью Макконахи    | Научная фантастика|
| Интерстеллар| Энн Хэтэуэй         | Научная фантастика|

Проблема здесь в том, что актёр и жанр фильма связаны друг с другом вне
прямой зависимости от самого фильма. Например, фильм «Матрица» имеет
двух актёров и один жанр, но в будущем может появиться третий актёр,
играющий роль, и эта запись создаст проблему, так как новый актёр тоже
будет зависеть от жанра.

Такое отношение называется многозначной зависимостью (МДЗ), и оно
нарушает четвёртую нормальную форму.

### Как устранить проблему?
Нужно разбить одну большую таблицу на несколько маленьких
специализированных таблиц:

#### Таблица фильмов и жанров:

| Фильм       | Жанр              |
|-------------|-------------------|
| Матрица     | Научная фантастика|
| Интерстеллар| Научная фантастика|

#### Таблица фильмов и актёров:

| Фильм       | Актёр               |
|-------------|---------------------|
| Матрица     | Киану Ривз          |
| Матрица     | Лоуренс Фишберн     |
| Интерстеллар| Мэттью Макконахи    |
| Интерстеллар| Энн Хэтэуэй         |

Теперь связь актера и жанра снята, и никакой проблемы с лишним
хранением данных больше нет.

## Итоги четвертой нормальной формы:

- Устраняет ситуации, когда одна сущность зависит от нескольких
независимых сущностей одновременно (например, фильм зависит и от
актеров, и от жанра).
- Делит большие таблицы на специализированные, уменьшая риск появления
ошибок и улучшая производительность запросов.

Благодаря 4НФ твои данные будут идеально структурированы, легко
читаться и эффективно обрабатываться системой баз данных.

========================================================================
Форма №5
========================================================================

Пятая нормальная форма (5НФ) или проектно-перекрестная нормальная форма
применяется тогда, когда важно исключить скрытые зависимости,
возникающие из-за перекрестных отношений между несколькими наборами
данных.

### Для примера рассмотрим простую ситуацию:
Предположим, у нас есть каталог сувениров из различных городов России,
где сувенир может продаваться в определённом магазине конкретного
города. Пусть наша таблица выглядит так:

| Город          | Магазин  | Сувенир       |
|----------------|----------|---------------|
| Москва         | ГУМ      | Магнитик      |
| Москва         | ЦУМ      | Брелок        |
| Санкт-Петербург| Пассаж   | Чайный набор  |
| Екатеринбург   | Малышева | Статуэтка     |

Эта таблица кажется простой, однако возникают некоторые трудности:
допустим, завтра появится магазин, продающий магнитики, и город
изменится. Мы можем случайно нарушить согласованность данных, вставив
неверную комбинацию города и магазина.

Например, предположим, что открылся новый магазин в Екатеринбурге,
и туда привезли магнитики из Москвы. Тогда таблица примет следующий
неправильный вид:

| Город           | Магазин       | Сувенир               |
|-----------------|---------------|-----------------------|
| Москва          | ГУМ           | Магнитик              |
| Москва          | ЦУМ           | Брелок                |
| Санкт-Петербург | Пассаж        | Чайный набор          |
| Екатеринбург    | Малышева      | Статуэтка             |
| Екатеринбург    | Новый_магазин | Магнитик (из Москвы!) |

Очевидно, возникла ошибка: московские магнитики попали в
екатеринбургский магазин. Чтобы избежать подобной путаницы,
нужно применить пятую нормальную форму.

### Решение проблемы:
Разделяем исходную таблицу на три маленькие таблицы:

#### Таблица магазинов и городов:

| Магазин       | Город           |
|---------------|-----------------|
| ГУМ           | Москва          |
| ЦУМ           | Москва          |
| Пассаж        | Санкт-Петербург |
| Малышева      | Екатеринбург    |
| Новый_магазин | Екатеринбург    |

#### Таблица товаров и магазинов:

| Магазин       | Товары       |
|---------------|--------------|
| ГУМ           | Магнитик     |
| ЦУМ           | Брелок       |
| Пассаж        | Чайный набор |
| Малышева      | Статуэтка    |
| Новый_магазин | Магнитик     |

#### Таблица городов и товаров:

| Город          | Товары       |
|----------------|--------------|
| Москва         | Магнитик     |
| Москва         | Брелок       |
| Санкт-Петербург| Чайный набор |
| Екатеринбург   | Статуэтка    |

Таким образом, теперь каждая комбинация правильная и строго подчиняется
своим правилам. Нет никаких лишних пересечений, и никакая информация
не теряется.

## Итоги пятой нормальной формы:

- Избавляет от сложных скрытых связей между множествами объектов
(город/товар/магазин);
- Гарантирует отсутствие аномалий при изменении данных;
- Позволяет создавать компактные и точные структуры данных.

Применяя пятую нормальную форму, ваши данные станут чистыми, свободными
от внутренних противоречий и эффективными для управления.

========================================================================
Форма №6
========================================================================

Шестая нормальная форма (6НФ) является наиболее строгой среди форм
нормализации и используется крайне редко. Её цель — свести каждую
таблицу к минимальному виду, содержащему лишь атомарные факты,
состоящие из уникальных ключевых атрибутов.

### Суть шестой нормальной формы:
Каждая таблица должна содержать только уникальные комбинации ключей и
соответствующих фактов. Никакие атрибуты не могут иметь повторяющиеся
значения даже в рамках отдельной строки.

#### Рассмотрим пример:
Пусть у нас есть библиотека книг с авторами и издательствами:

| ISBN книги | Автор       | Издательство |
|------------|-------------|--------------|
| A123       | Пушкин      | Азбука       |
| B456       | Толстой     | Эксмо        |
| C789       | Достоевский | Альфа-книга  |

Проблема здесь в том, что если автор написал несколько книг, то его имя
повторится в таблице многократно. Аналогично с издательством.

Чтобы прийти к шестому уровню нормализации, делим данные на максимально
мелкие сущности:

#### Таблица авторов:

| ID автора | Автор       |
|-----------|-------------|
| AUT1      | Пушкин      |
| AUT2      | Толстой     |
| AUT3      | Достоевский |

#### Таблица издательств:

| ID издательства | Издательство |
|-----------------|--------------|
| PUB1            | Азбука       |
| PUB2            | Эксмо        |
| PUB3            | Альфа-книга  |

#### Основная таблица книг:

| ISBN книги | ID автора | ID издательства |
|------------|-----------|-----------------|
| A123       | AUT1      | PUB1            |
| B456       | AUT2      | PUB2            |
| C789       | AUT3      | PUB3            |

Теперь в основной таблице хранятся только ссылки на внешние объекты
(авторы и издательства), а сами авторы и издательства выделены в
отдельные справочники.

---

## Итоги шестой нормальной формы:

- Полностью исключаются повторы данных любого типа.
- Каждое уникальное сочетание сведений хранится отдельно и нигде
    повторно не встречается.
- Используется крайне редко, поскольку структура становится чрезмерно
    сложной для повседневного использования и обслуживания.

Применение шестой нормальной формы оправдано только в специфичных
случаях больших аналитических систем, где важен абсолютный контроль
над каждым фактом.

========================================================================
Форма №7
========================================================================

В теории реляционных баз данных существует понятие седьмой нормальной
формы (7НФ), но она носит скорее теоретический характер и практически
не применяется на практике. Причина проста: требования седьмой
нормальной формы настолько строги, что приводят к созданию огромного
количества мелких таблиц, затрудняя работу с базой данных.

Основная идея седьмой нормальной формы состоит в следующем:

### Цель седьмой нормальной формы:
Максимально уменьшить количество избыточных данных путём исключения
любых возможных зависимостей между любыми подмножествами данных.

Другими словами, каждая таблица должна содержать абсолютно независимые
элементы, не имеющие никаких общих свойств или зависимостей.

### Почему это почти невозможно реализовать?
Достижение полной независимости фактически означает необходимость
разделения каждой пары связанных данных на отдельную таблицу.
Такое дробление ведёт к образованию множества крошечных таблиц,
которые трудно объединять, анализировать и управлять ими.

Например, если бы мы применили седьмую нормальную форму к нашей
библиотеке книг, пришлось бы выделять отдельный столик для каждой
комбинации:

- Книга–Автор,
- Книга–Издательство,
- Автор–Издательство

… и далее продолжать деление вплоть до уровня отдельных характеристик.

Такая сложность приводит к тому, что ни одна система баз данных не
поддерживает автоматическое достижение 7НФ, да и разработчики
предпочитают оставаться на уровне третьей или четвёртой нормальной
формы, которые обеспечивают баланс между производительностью и
качеством данных.

Поэтому седьмая нормальная форма остаётся предметом академического
интереса и исследования, но на практике почти не используется.

Пример приведённой ранее седьмой нормальной формы достаточно сложный и
относится к экстремальным случаям оптимизации данных. Тем не менее,
попробуем рассмотреть упрощённый сценарий, иллюстрирующий принципы 7НФ.

### Задача:
Допустим, у нас есть маленькая школа, где учатся ученики, преподают
преподаватели и есть различные предметы. Наша задача — нормализовать
данные до самой крайней степени.

Начнём с обычной таблицы:

```
| Студент  | Преподаватель | Предмет |
|----------|---------------|---------|
| Миша     | Мария Ивановна| Математика|
| Вася     | Пётр Сергеевич| Химия    |
| Катя     | Андрей Николаевич| История |
```

Проблема в том, что эта таблица включает многократные пересечения
данных: одни студенты изучают разные предметы, преподаватели ведут
разные курсы, и сам предмет также пересекается с разными студентами
и преподавателями.

Чтобы достичь седьмой нормальной формы, мы стремимся минимизировать
возможность повторений и коррелирующих связей между отдельными фактами.

### Шаги для достижения 7НФ:

1. **Разделение студентов и преподавателей:**

Таблица студентов:

```
| ID студента | Имя студента |
|-------------|-------------|
| STU1        | Миша        |
| STU2        | Вася        |
| STU3        | Катя        |
```

Таблица преподавателей:

```
| ID преподавателя | Имя преподавателя |
|------------------|------------------|
| TCH1             | Мария Ивановна   |
| TCH2             | Пётр Сергеевич   |
| TCH3             | Андрей Николаевич|
```

2. **Создание отдельного справочника предметов:**

Таблица предметов:

```
| ID предмета | Название предмета |
|-------------|-------------------|
| SUB1        | Математика        |
| SUB2        | Химия             |
| SUB3        | История           |
```

3. **Связывание студентов и предметов:**

Таблица посещаемых предметов:

```
| ID студента | ID предмета |
|-------------|-------------|
| STU1        | SUB1        |
| STU2        | SUB2        |
| STU3        | SUB3        |
```

4. **Связывание преподавателей и предметов:**

Таблица ведения уроков:

```
| ID преподавателя | ID предмета |
|------------------|-------------|
| TCH1             | SUB1        |
| TCH2             | SUB2        |
| TCH3             | SUB3        |
```

---

### Резюме:

Получилось огромное число небольших таблиц, каждая из которых хранит
минимум необходимых сведений и избегает повторений или двойных связей
между ними. Эта структура обеспечивает полную независимость данных,
минимизирует вероятность возникновения конфликта и позволяет
максимально упростить управление.

Однако такое решение крайне редкое в реальных проектах, так как
подобное разделение создаёт огромные сложности при обработке данных и
значительно снижает производительность запросов. Поэтому седьмая
нормальная форма рассматривается скорее как крайний вариант,
применяемый только в особых ситуациях.

========================================================================
Форма №8
========================================================================

В настоящее время общепринято считать, что существует семь основных
нормальных форм (от первой до седьмой), каждая из которых
последовательно улучшает организацию данных в базе. Однако восьмая
нормальная форма официально не признана и не принята в стандартизации
 SQL или теории реляционных баз данных.

Тем не менее, иногда специалисты предлагают собственные расширения или
 модификации существующих нормальных форм, стремясь дополнительно
 повысить качество организации данных. Такие идеи остаются
 экспериментальными и применяются крайне редко.

Однако если говорить обобщённо, гипотетическая
"восьмая нормальная форма" могла бы означать дальнейшее повышение
требований к независимости данных, устранение любых потенциальных
источников конфликтов и оптимизацию моделей данных на совершенно
новом уровне детализации.

На сегодняшний день реальная практика ограничивается семью формами,
поскольку дальнейшие улучшения приводят к неоправданному усложнению
структуры базы данных и снижению производительности системы.

Поэтому восьмая нормальная форма остается исключительно предметом
обсуждения и исследований специалистов в области информационных
технологий.

Поскольку восьмая нормальная форма не признана официальной частью
стандарта реляционной модели данных, примеров её реализации в реальной
жизни нет. Любые возможные варианты развития концепции являются чисто
теоретическими размышлениями и часто вызывают споры среди экспертов.

Однако давайте попробуем представить гипотетически, как могла бы
выглядеть подобная форма на примере библиотеки книг:

### Гипотетические шаги достижения "восьмой нормальной формы":

1. **Расщепляем дополнительные свойства**: Убираем любую потенциальную
зависимость между любыми двумя случайными атрибутами.

   Вместо единой таблицы книг:

   ```
   | ISBN книги | Автор   | Год издания | Количество страниц |
   |------------|---------|-------------|-------------------|
   | A123       | Пушкин  | 1830        | 200               |
   | B456       | Толстой | 1860        | 500               |
   ```

   Разбиваем на четыре таблицы:

   #### Авторы:
   ```
   | ID автора | Автор   |
   |-----------|---------|
   | AUT1      | Пушкин  |
   | AUT2      | Толстой  |
   ```

   #### Книги:
   ```
   | ISBN книги | ID автора | Год издания |
   |------------|-----------|-------------|
   | A123       | AUT1      | 1830        |
   | B456       | AUT2      | 1860        |
   ```

   #### Число страниц:
   ```
   | ISBN книги | Количество страниц |
   |------------|-------------------|
   | A123       | 200                |
   | B456       | 500                |
   ```

2. **Исключение любых косвенных зависимостей**: Даже малейшее
подозрение на возможную зависимость приводит к дальнейшей
декомпозиции данных.

   Вместо:

   ```
   | ISBN книги | Цена   | Валюта |
   |------------|--------|--------|
   | A123       | 100    | руб.   |
   | B456       | 200    | доллары|
   ```

   Получаем:

   #### Цены:
   ```
   | ISBN книги | Цена   |
   |------------|--------|
   | A123       | 100    |
   | B456       | 200    |
   ```

   #### Валюты:
   ```
   | ISBN книги | Валюта |
   |------------|--------|
   | A123       | руб.   |
   | B456       | доллары|
   ```

---

### Подведем итог:
Эти изменения носят гипотетический характер и служат иллюстрацией
подхода, который мог бы соответствовать идеям
"восьмой нормальной формы". Однако реальность такова, что подобные
меры делают систему чрезвычайно громоздкой и трудной для эксплуатации,
существенно снижая производительность и удобство работы с базой данных.

Именно поэтому реальные практики проектирования баз данных
ограничиваются первыми четырьмя-шестью нормальными формами,
обеспечивающими разумный компромисс между структурой и удобством
использования.

========================================================================
Форма №9
========================================================================

Девятую нормальную форму (9НФ) официально не признаёт теория реляционных
баз данных, и она не входит в стандартные уровни нормализации. По сути,
нормализация останавливается на седьмой нормальной форме, и девятый
уровень является либо спекулятивным расширением, либо термином,
используемым специалистами для обозначения особо радикальной
оптимизации данных.

Однако можно попытаться описать концепцию гипотетической девятой
нормальной формы следующим образом:

### Основные характеристики 9НФ:

1. **Минимизация размера таблиц**: Каждая таблица содержит минимальное
возможное количество записей и колонок, обеспечивая высокую степень
абстрагирования данных.

2. **Устранение любых остаточных ассоциаций**: Удаляются даже самые
слабые ассоциации между различными фрагментами данных, включая
потенциальные статистические корреляции.

3. **Абсолютная независимость данных**: Все фрагменты данных существуют
независимо друг от друга, не влияя на содержимое других фрагментов.

### Практическое применение:
Реализовывать девятую нормальную форму на практике бессмысленно, так
как преимущества подобного дробления данных перевешиваются огромными
сложностями:

- Запросы становятся невероятно сложными и ресурсоемкими.
- Производительность резко падает из-за постоянного объединения
большого числа таблиц.
- Администрирование и поддержка базы данных превращаются в сложную
техническую задачу.

Следовательно, концепция девятой нормальной формы остаётся чисто
теоретическим построением и не находит широкого распространения в
практических приложениях. Обычно разработчиков вполне устраивает
организация данных согласно первым пяти-шести формам нормализации,
что даёт достаточный уровень чистоты данных и приемлемую
производительность.

Девятая нормальная форма (9НФ) не признается официальным уровнем
нормализации, и примеры её реализации отсутствуют в практике разработки
баз данных. Теоретически можно предположить, что гипотетическая девятая
нормальная форма могла бы представлять собой предельную степень
расщепления данных на минимальные составляющие, свободные от любых
возможных связей и зависимостей.

Рассмотрим гипотетический пример библиотечной системы, которую мы могли
бы попробовать привести к воображаемой девятой нормальной форме:

### Исходная таблица книг:

```
| ISBN книги | Автор   | Название книги | Жанр  |
|------------|---------|----------------|-------|
| A123       | Пушкин  | Евгений Онегин | Роман |
| B456       | Толстой | Война и мир    | Эпопея|
```

#### Первый этап: Применение обычных нормальных форм:

Мы разбиваем книгу на составные части, приводя данные к пятой
нормальной форме:

1. **Авторы:**

```
| ID автора | Автор    |
|-----------|----------|
| AUT1      | Пушкин   |
| AUT2      | Толстой  |
```

2. **Книги:**

```
| ISBN книги | ID автора | Название книги |
|------------|-----------|----------------|
| A123       | AUT1      | Евгений Онегин |
| B456       | AUT2      | Война и мир    |
```

3. **Жанры:**

```
| ID жанра | Жанр  |
|----------|-------|
| GEN1     | Роман |
| GEN2     | Эпопея|
```

4. **Книга-жанр:**

```
| ISBN книги | ID жанра |
|------------|----------|
| A123       | GEN1     |
| B456       | GEN2     |
```

#### Гипотетический переход к девятой нормальной форме:

Далее предполагаем, что мы хотим полностью избавиться от любых остатков
связей между этими компонентами, достигнув максимального уровня
изоляции.

1. **ISBN-код и название книги:**

```
| ISBN книги | Название книги |
|------------|----------------|
| A123       | Евгений Онегин |
| B456       | Война и мир    |
```

2. **ID автора и имени автора:**

```
| ID автора | Автор    |
|-----------|----------|
| AUT1      | Пушкин   |
| AUT2      | Толстой  |
```

3. **Название книги и жанр:**

```
| Название книги | ID жанра |
|----------------|----------|
| Евгений Онегин | GEN1     |
| Война и мир   | GEN2      |
```

4. **Отдельная таблица жанров:**

```
| ID жанра | Жанр  |
|----------|-------|
| GEN1     | Роман |
| GEN2     | Эпопея|
```

5. **Ещё одна промежуточная таблица ISBN и ID автора:**

```
| ISBN книги | ID автора |
|------------|-----------|
| A123       | AUT1      |
| B456       | AUT2      |
```

---

### Итоговая схема:
Каждое отдельное свойство представлено своей собственной маленькой
таблицей, и все остальные отношения представлены связующими таблицами.

### Заключение:
Подобная структура превращается в огромную сеть взаимосвязанных таблиц,
что серьёзно осложняет запросы и ухудшает производительность. Именно
поэтому девять нормальных форм и выше считаются нефункциональными и
используются исключительно в научных дискуссиях, но не в практической
разработке баз данных.