```python


class FinancialReport:
    """Класс финансового отчёта компании."""

    def __init__(self, company_name, revenue, expenses):
        """
        Конструктор класса с параметрами:
            company_name - название компании
            revenue      - доходы компании
            expenses     - расходы компании
        """
        self.company_name = company_name
        self.revenue = revenue
        self.expenses = expenses

    def generate_report(self):
        """
        Метод формирования стандартного отчета компании.
        Возвращает строку с отчетом о доходах и расходах.
        """
        report = (f"Отчёт компании \"{self.company_name}\" "
                  f"за последний финансовый период:\n")
        report += f"Доходы: {self.revenue} млн рублей\n"
        report += f"Расходы: {self.expenses} млн рублей\n"
        return report


# Класс-декоратор для налоговой инспекции
class TaxAuthorityDecorator:
    """Декоратор, дополняющий стандартный отчёт информацией для налогового органа."""

    def __init__(self, component):
        """
        Конструктор принимает компонент — экземпляр основного класса FinancialReport.
        """
        self.component = component

    def generate_report(self):
        """
        Метод формирует расширенный отчёт для Налогового комитета.
        Добавляет данные о представлении сведений в налоговую инспекцию.
        """
        original_report = self.component.generate_report()  # Получаем исходный отчёт
        decorated_report = f"{original_report}\n"
        decorated_report += "Представлено в налоговый орган ФНС России.\n"
        decorated_report += "Сведения о налогооблагаемой прибыли прилагаются."
        return decorated_report


# Класс-декоратор для Пенсионного фонда
class PensionFundDecorator:
    """Декоратор, формирующий отчёт для Пенсионного фонда."""

    def __init__(self, component):
        """
        Конструктор получает основной класс FinancialReport.
        """
        self.component = component

    def generate_report(self):
        """
        Формирование отчёта с дополнительной информацией для ПФР.
        Включает сведения о перечислении страховых взносов.
        """
        original_report = self.component.generate_report()  # Исходный отчёт
        decorated_report = f"{original_report}\n"
        decorated_report += ("Представлено в Пенсионный фонд\nРоссийской "
                             "Федерации.\n")
        decorated_report += "Перечислены страховые взносы сотрудников."
        return decorated_report


# Класс-декоратор для Росстата
class RosstatDecorator:
    """Декоратор для оформления отчёта в Росстат."""

    def __init__(self, component):
        """
        Конструктор декораторов принимает объект FinancialReport.
        """
        self.component = component

    def generate_report(self):
        """
        Расширяет отчёт дополнительными сведениями для Федеральной службы госстатистики.
        Включает ссылку на приложение данных статистического наблюдения.
        """
        original_report = self.component.generate_report()  # Стандартный отчёт
        decorated_report = f"{original_report}\n"
        decorated_report += ("Представлено в Федеральную службу \n"
                             "государственной статистики (Росстат).\n")
        decorated_report += "Данные статистического наблюдения приложены."
        return decorated_report


# Основной блок программы
if __name__ == "__main__":
    # Создание экземпляра отчёта для конкретной компании
    company_report = FinancialReport(
        company_name="ООО 'Технокомп'",  # Название компании
        revenue=500,  # Доходы
        expenses=300  # Расходы
    )

    # Генерация отчётов для различных государственных органов
    print("\nОтчёт для налоговой инспекции:")
    tax_report = TaxAuthorityDecorator(
        company_report)  # Декоратор для налоговой
    print(tax_report.generate_report())  # Печать сформированного отчёта

    print("\nОтчёт для Пенсионного фонда:")
    pension_report = PensionFundDecorator(company_report)  # Декоратор для ПФР
    print(pension_report.generate_report())  # Отчёт для Пенсионного фонда

    print("\nОтчёт для Росстата:")
    rosstat_report = RosstatDecorator(company_report)  # Декоратор для Росстата
    print(
        rosstat_report.generate_report())  # Финальная версия отчёта для Росстата


'''
========================================================================
        КАК ЭТО РАБОТАЕТ
========================================================================
Операция += со строками в Python используется для конкатенации 
(объединения) строк. Она позволяет добавлять одну строку к другой 
последовательно, создавая новую объединённую строку.

Рассмотрим подробнее, как это происходит в вашем примере метода 
`generate_report()`:

### Как работает метод?

Метод `generate_report()` генерирует отчёт компании в виде строки, 
содержащей информацию о её доходах и расходах.

Вот пошаговая логика работы метода:

1. **Инициализация переменной**  
   Сначала создаётся строка `report`, которая начинается с заголовка 
   отчёта: 
'''
report = (f"Отчёт компании \"{self.company_name}\" "
         f"за последний финансовый период:\n")
'''
   Здесь мы используем форматированную строку (`f-string`), 
   которая вставляет значение поля `company_name`.

2. **Добавление следующей части текста**
   Затем добавляется информация о доходах:
'''
report += f"Доходы: {self.revenue} млн рублей\n"
'''
   Операция `+=` добавляет новую строку в конец существующей строки 
   `report`. После выполнения этой операции содержимое переменной 
   станет таким:

'''
Отчёт компании "<название_компании>" за последний финансовый период:
Доходы: <доходы> млн рублей
'''

3. **Продолжение добавления данных**
   Далее аналогичным образом добавляем информацию о расходах:
'''
report += f"Расходы: {self.expenses} млн рублей\n"
'''

   Теперь строка выглядит следующим образом:

'''
Отчёт компании "<название_компании>" за последний финансовый период:
Доходы: <доходы> млн рублей
Расходы: <расходы> млн рублей
'''

4. **Возврат итоговой строки**

   По завершении сборки всей необходимой информации методом возвращается 
   полная строка отчёта:
'''
# return report
'''
 Итоговая последовательность операций:

1. Создаётся начальная строка.
2. К ней последовательно дописываются новые строки через операцию `+=`.
3. Итоговая собранная строка возвращается как готовый отчёт.

Таким образом, использование оператора += упрощает создание сложных 
строк путём последовательного добавления отдельных частей текста друг 
за другом.
'''
