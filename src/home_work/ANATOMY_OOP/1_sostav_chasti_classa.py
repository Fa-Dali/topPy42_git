# 1_sostav_chasti_classa.py

'''
В Python объектно-ориентированное программирование (ООП) реализуется с помощью
классов. Любой класс в Python состоит из нескольких ключевых компонентов,
которые определяют его структуру и поведение. Вот основные составные части
класса в Python:

### 1. Имя класса

Имя класса — это уникальное наименование, которое идентифицирует класс.
            Имя должно следовать рекомендациям по стилю кода (PEP 8),
            где классам обычно присваивают имена в верхнем camel case
            (например, Person, Student).
'''
class Student:
    pass
'''
### 2. Атрибуты класса

Атрибуты класса — это данные, хранимые внутри класса. Они делятся на два типа:

- Атрибуты экземпляра: атрибуты, которые принадлежат 
                        конкретному объекту (экземпляру) класса. 
                        Они определены внутри метода __init__ 
                        и ссылаются на экземпляр через префикс self.
'''
class Student:
    def __init__(self, name, age):
        self.name = name  # атрибут экземпляра
        self.age = age    # атрибут экземпляра
'''
- Атрибуты класса: атрибуты, которые принадлежат всему классу 
                    и общие для всех его экземпляров. 
                    Они объявляются непосредственно в теле класса.
'''
class Student:
    school = "Example High School"  # атрибут класса
'''
### 3. Методы класса

Методы класса — это функции, которые принадлежат классу и могут 
                изменять его состояние или 
                выполнять какие-либо действия. 

Основные типы методов:

- Методы экземпляра: методы, которые работают с конкретным экземпляром класса 
                    и получают доступ к его атрибутам. Первым аргументом всегда 
                    является self, который ссылается на экземпляр класса.
'''
class Student:
    def introduce(self):
        print(f"Я {self.name}, мне {self.age} лет.")
'''

- Методы класса: методы, которые работают с самим классом, а не с конкретным 
                    экземпляром. Первые аргументы — это ссылки на класс (cls).
'''
class Student:
    @classmethod
    def info(cls):
        print(f"Класс {cls.__name__} из школы {cls.school}.")
'''

- Статические методы: методы, которые не связаны ни с экземпляром, 
                        ни с классом. Они похожи на обычные функции, 
                        но включены в класс для лучшей организации кода.
'''
class Student:
    @staticmethod
    def calculate_grade(score):
        if score >= 90:
            return "Отлично"
        elif score >= 70:
            return "Хорошо"
        else:
            return "Удовлетворительно"
'''
### 4. **Конструктор (__init__)**

Метод __init__ — это специальный метод, который автоматически вызывается 
                при создании нового экземпляра класса. Он инициализирует 
                атрибуты экземпляра.
'''
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
'''

### Магические методы (специальные методы)

Некоторые методы Python имеют особые назначения и вызываются автоматически 
в определённых ситуstrНапример:

- __str__: возвращает строковое предсrepr объекта.
- __repr__: возвращает официальное строковое предсlenе объекта.
- __len__: возвращаeqну объекта.
- __eq__: сравнивает объекты на равенство.
'''
class Student:
    def __str__(self):
        return f"Студент {self.name}, {self.age} лет"

    def __repr__(self):
        return f"Student('{self.name}', {self.age})"
'''

### Наследованиеие

Возможность наследоваться от другого класса 
    и переопределять 
    или расширять его функциональность.
'''
class Person:
    def __init__(self, name):
        self.name = name

class Student(Person):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age
'''
### Свойства (Properties)s)

Позволяют скрыть внутреннюю реализацию атрибутов и предоставлять доступ к ним 
через методы (геттеры и сеттеры).
'''
class Student:
    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        if isinstance(value, str):
            self._name = value
        else:
            raise ValueError("Имя студента должно быть строкой.")
'''
### Итог:
Класс в Python состоит из следующих компонентов:

- Имя класса.
- Атрибуты класса и экземпляра.
- Методы класса (включая методы экземпляра, методы класса и статические методы)
- Магические методы.
- Конструктор (__init__).
- Свойства.
- Наследование.

Эти компоненты образуют ядро любого класса в Python и позволяют реализовать 
гибкие и мощные структуры данных и поведений.
'''