### 18
# ПОДСТАНОВОЧНЫЕ ИМЕНА (*args, **kwargs) - При определении методов
#                        иногда полезно передавать произвольное количество
#                        аргументов. Аргументы могут передаваться
#                        позиционно (*args) или именованно (**kwargs).
class Магазин:
    def купить(self, *товары):
        for товар in товары:
            print(f'Купил {товар}.')
'''            
========================================================================
        Что значит "*args" и "**kwargs"?
========================================================================
Давай разберем всё подробно и понятно!

## Что значит "*args" и "**kwargs"?

Эти конструкции позволяют создавать методы (или функции), которые 
принимают любое количество аргументов. Вот зачем они нужны:

### 1. **Что такое *args?**
*args — это специальный синтаксис, позволяющий передать в функцию или 
метод неопределённое число позиционных аргументов. Позиционные 
аргументы — это такие значения, которые передаются в порядке следования, 
а не по имени.

Например, у тебя есть функция покупки товаров, и ты заранее не знаешь, 
сколько именно товаров человек захочет купить. Чтобы решить такую 
проблему, используют *args.

Пример:
'''
class Магазин:
    def купить(self, *товары):
        for товар in товары:
            print(f'Купил {товар}.')
'''
Здесь аргумент называется `*товары`. Когда кто-то вызывает этот метод, 
он может передать любое количество товаров:
'''
магазин = Магазин()
магазин.купить('яблоки', 'молоко', 'хлеб')  # Можно передавать
                                                    # столько товаров,
                                                    # сколько захочешь
'''
Это равносильно передаче списка, но намного удобнее! Внутри метода 
товары будут представлены как кортеж, даже если передан всего один 
элемент.

### 2. **Что такое **kwargs?**
**kwargs — это специальная конструкция, позволяющая передавать 
неограниченное количество именованных аргументов (ключ-значение). 
Это удобно, когда аргументы разные и каждый имеет своё имя.

Предположим, у вас есть метод отправки письма, и вам нужно задать 
различные опции вроде темы, отправителя и получателя. Но ты точно не 
знаешь, какие именно настройки понадобятся каждому пользователю.

Пример:
'''
class Почта:
    def отправить(self, **опции):
        for ключ, значение in опции.items():
            print(f'{ключ}: {значение}')
'''
Теперь можно вызвать такой метод вот так:

'''
почта = Почта()
почта.отправить(тема='Привет!', от='ivan@mail.ru', кому='petya@gmail.com')
'''

При вызове ты можешь указывать любые ключи и соответствующие им значения. 
Они будут переданы внутрь метода как словарь.

### Заключение

Итак, подведём итоги:
- **\***args**: Используется для передачи любого количества позиционных 
                аргументов (например, список покупок, набор чисел 
                и т.п.).
- **\*\***kwargs**: Используется для передачи любых именованных 
                    аргументов (параметры с названиями, например, 
                    настройка почты, конфигурация системы и др.).

Такими конструкциями пользоваться легко и удобно, особенно когда точное 
количество или имена аргументов неизвестны заранее.
'''