### 18
# ПОДСТАНОВОЧНЫЕ ИМЕНА (*args, **kwargs) - При определении методов
#                        иногда полезно передавать произвольное количество
#                        аргументов. Аргументы могут передаваться
#                        позиционно (*args) или именованно (**kwargs).
class Магазин:
    def купить(self, *товары):
        for товар in товары:
            print(f'Купил {товар}.')
'''            
========================================================================
        Что значит "*args" и "**kwargs"?
========================================================================
Давай разберем всё подробно и понятно!

## Что значит "*args" и "**kwargs"?

Эти конструкции позволяют создавать методы (или функции), которые 
принимают любое количество аргументов. Вот зачем они нужны:

### 1. **Что такое *args?**
*args — это специальный синтаксис, позволяющий передать в функцию или 
метод неопределённое число позиционных аргументов. Позиционные 
аргументы — это такие значения, которые передаются в порядке следования, 
а не по имени.

Например, у тебя есть функция покупки товаров, и ты заранее не знаешь, 
сколько именно товаров человек захочет купить. Чтобы решить такую 
проблему, используют *args.

Пример:
'''
class Магазин:
    def купить(self, *товары):
        for товар in товары:
            print(f'Купил {товар}.')
'''
Здесь аргумент называется `*товары`. Когда кто-то вызывает этот метод, 
он может передать любое количество товаров:
'''
магазин = Магазин()
магазин.купить('яблоки', 'молоко', 'хлеб')  # Можно передавать
                                                    # столько товаров,
                                                    # сколько захочешь
'''
Это равносильно передаче списка, но намного удобнее! Внутри метода 
товары будут представлены как кортеж, даже если передан всего один 
элемент.

### 2. **Что такое **kwargs?**
**kwargs — это специальная конструкция, позволяющая передавать 
неограниченное количество именованных аргументов (ключ-значение). 
Это удобно, когда аргументы разные и каждый имеет своё имя.

Предположим, у вас есть метод отправки письма, и вам нужно задать 
различные опции вроде темы, отправителя и получателя. Но ты точно не 
знаешь, какие именно настройки понадобятся каждому пользователю.

Пример:
'''
class Почта:
    def отправить(self, **опции):
        for ключ, значение in опции.items():
            print(f'{ключ}: {значение}')
'''
Теперь можно вызвать такой метод вот так:

'''
почта = Почта()
почта.отправить(тема='Привет!', от='ivan@mail.ru', кому='petya@gmail.com')
'''

При вызове ты можешь указывать любые ключи и соответствующие им значения. 
Они будут переданы внутрь метода как словарь.

### Заключение

Итак, подведём итоги:
- **\***args**: Используется для передачи любого количества позиционных 
                аргументов (например, список покупок, набор чисел 
                и т.п.).
- **\*\***kwargs**: Используется для передачи любых именованных 
                    аргументов (параметры с названиями, например, 
                    настройка почты, конфигурация системы и др.).

Такими конструкциями пользоваться легко и удобно, особенно когда точное 
количество или имена аргументов неизвестны заранее.

========================================================================
        **kwargs ОБЯЗАТЕЛЬНО ПИСАТЬ С ДВУМЯ ЗВЕЗДОЧКАМИ?
========================================================================

Да, обязательно писать с двумя звёздочками `**`. Именно такая запись 
обозначает передачу произвольного набора именованных аргументов в виде 
словаря (dictionary).

Давайте поясним подробнее:

- Одинарная звёздочка (`*`) применяется для сбора всех _позиционных_ 
            аргументов в единый контейнер (кортеж).
- Двойная звёздочка (`**`) предназначена для приёма именованных 
            аргументов (_key-value_), которые автоматически собираются 
            в словарь.

Правильная форма записи именованных аргументов обязательна, иначе 
интерпретатор Python не сможет правильно обработать ваши аргументы.

Пример правильного использования обоих подходов:
'''
def example_function(*args, **kwargs):
    print("Позиционные аргументы:", args)
    print("Именованные аргументы:", kwargs)

example_function(1, 2, 3, a=4, b=5)
'''

Результатом выполнения будет:
'''
Позиционные аргументы: (1, 2, 3)
Именованные аргументы: {'a': 4, 'b': 5}
'''

Таким образом, правильный способ обозначения именованных аргументов — 
только с двойной звездочкой (`**kwargs`).

========================================================================
        ПРИМЕРЫ В МЕБЕЛЬНОМ ПРОИЗВОДСТВЕ
========================================================================

Примеры запросов с использованием `*args` и `**kwargs` для мебельного производства на основе твоих идей:

### Примеры с `*args`

#### 1. Общее табло
'''
def обновить_табло(*сообщения):
    for сообщение in сообщения:
        print(сообщение)

обновить_табло("Новый заказ №123 принят.",
               "Заказ №456 отправлен на распиловку.")
'''

#### 2. Распределение заданий между сотрудниками
'''
def назначить_задания(*сотрудники):
    for сотрудник in сотрудники:
        print(f"Сотрудник {сотрудник} получил задание.")

назначить_задания("Иван Иванов",
                  "Петя Петров",
                  "Анна Смирнова")
'''

#### 3. Информация о состоянии инструментов
'''
def проверить_инструменты(*инструменты):
    for инструмент in инструменты:
        print(f"Проверьте состояние инструмента '{инструмент}'.")

проверить_инструменты("Фрезерный станок",
                      "Электролобзик",
                      "Шлифмашинка")
'''

#### 4. Контроль качества продукции
'''
def проверка_бракованного_продукта(*детали):
    for деталь in детали:
        print(f"Дефект обнаружен в детали '{деталь}'!")

проверка_бракованного_продукта("Столешница",
                               "Ножки стола",
                               "Фасад шкафа")
'''

#### 5. Запись прихода материалов на склад
'''
def принять_материалы(*листья_лдсп):
    for лист in листья_лдсп:
        print(f"На склад поступил лист ЛДСП формата '{лист}'.")

принять_материалы("2700x1800", "1600x1200", "3000x2000")
'''

### Примеры с `**kwargs`
'''
#### 6. Подробности по заказу
'''
'''
def обработка_заказа(**заказ):
    if 'номер' in заказ:
        print(f"Обрабатывается заказ №{заказ['номер']}")
    else:
        print("Ошибка: номер заказа отсутствует.")

обработка_заказа(номер="Z-1234",
                 стадия="Распиловка",
                 ответственный="Антон Сидоров")
'''

#### 7. Отправка уведомления сотрудникам
'''
def уведомление(**события):
    for событие, сообщение in события.items():
        print(f"Внимание: {событие} — {сообщение}")

уведомление(недостача="Закончились материалы",
            дефект="Выявлен брак",
            ремонт="Требуется обслуживание станков")
'''

#### 8. Управление запасами склада
'''
def обновлять_остатки(**остатки):
    for материал, количество in остатки.items():
        print(f"Материал '{материал}' остался в количестве {количество} шт.")

обновлять_остатки(лист_лдсп=10,
                  фасады=50,
                  фурнитура=200)
'''

#### 9. Сбор обратной связи клиентов
'''
def собрать_отзывы(**клиенты):
    for клиент, отзыв in клиенты.items():
        print(f"Клиент {клиент} оставил отзыв: {отзыв}")

собрать_отзывы(Клиент1="Всё отлично, спасибо!",
               Клиент2="Удовлетворён качеством.",
               Клиент3="Небольшие проблемы с доставкой.")
'''

#### 10. Логистика доставки мебели клиентам
'''
def логистика_доставки(**местоположения):
    for адрес, статус in местоположения.items():
        print(f"Адрес доставки: {адрес}, Статус: {статус}")

логистика_доставки(Москва="Отправлена",
                   Петербург="В пути",
                   Новосибирск="Доставка выполнена")
'''
### Объяснение каждого примера:
- `*args`: Позволяют передавать списки значений без строгого определения 
                их типа и числа.
- `**kwargs`: Используются для передачи именованных аргументов (словарь
                ключей и значений), удобны, когда важно хранить 
                дополнительную информацию о каждом параметре отдельно.

Используя оба подхода вместе, можно создать гибкую систему обработки и 
контроля процессов на производстве мебели, упростив взаимодействие 
сотрудников и автоматизировав рутинные процессы.
'''