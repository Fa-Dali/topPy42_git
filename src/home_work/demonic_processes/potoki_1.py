# !/usr/bin/python
# === 10 ===
# пример — классический шаблон многопоточного приложения на Python

import threading  # Импортируем модуль для работы с потоками
import time       # Импортируем модуль для работы со временем

# Функция, которая будет выполняться в каждом потоке
def print_time(nazvanie_potoka, zaderzhka):
    schetchik = 0  # Начальное значение счётчика
    while schetchik < 5:  # Цикл повторяется 5 раз
        time.sleep(zaderzhka)  # Пауза на заданное время (zaderzhka)
        schetchik += 1  # Увеличиваем счётчик на 1
        tekushee_vremya = time.ctime(time.time())  # Получаем текущее время
        print(f"{nazvanie_potoka}: {tekushee_vremya}")  # Печать имени потока и текущего времени

threads = []  # Список для хранения созданных потоков

# Создаем два потока
try:
    potok1 = threading.Thread(target=print_time, args=("Поток-1", 1))  # Создаем первый поток
    threads.append(potok1)  # Добавляем поток в список
    potok2 = threading.Thread(target=print_time, args=("Поток-2", 1))  # Создаем второй поток
    threads.append(potok2)  # Добавляем поток в список

    # Запускаем созданные потоки
    for potok in threads:
        potok.start()  # Запускаем каждый поток

    # Ждём завершения всех потоков
    for potok in threads:
        potok.join()  # Ждём завершения каждого потока

except Exception as error:
    print(f"Ошибка: {error}")  # Выводим сообщение об ошибке, если что-то пошло не так

print("Потоки завершились")  # Сообщение о завершении работы потоков

''' КОД РУССКИМ ЯЗЫКОМ
# !/usr/bin/python

импортировать threading  # Импортируем модуль для работы с потоками
импортировать время      # Импортируем модуль для работы со временем

# Функция, которая будет выполняться в каждом потоке
деф распечатать_время(название_потока, задержка):
    счётчик = 0  # Начальное значение счётчика
    пока счётчик < 5:  # Цикл повторяется 5 раз
        время.сон(задержка)  # Пауза на заданное время (задержка)
        счётчик += 1  # Увеличиваем счётчик на 1
        текущее_время = время.ctime(время.время())  # Получаем текущее время
        отпечатать(f"{название_потока}: {текущее_время}")  # Печать имени потока и текущего времени

список_потоков = []  # Список для хранения созданных потоков

# Создаём два потока
попробовать:
    поток1 = threading.Поток(цель=распечатать_время, аргументы=("Поток-1", 1))  # Создаём первый поток
    список_потоков.добавить(поток1)  # Добавляем поток в список
    поток2 = threading.Поток(цель=распечатать_время, аргументы=("Поток-2", 1))  # Создаём второй поток
    список_потоков.добавить(поток2)  # Добавляем поток в список

    # Запускаем созданные потоки
    для потока в списке_потоков:
        поток.запустить()  # Запускаем каждый поток

    # Ждём завершения всех потоков
    для потока в списке_потоков:
        поток.ждать()  # Ждём завершения каждого потока

кроме Исключение как ошибка:
    отпечатать(f"Ошибка: {ошибка}")  # Выводим сообщение об ошибке, если что-то пошло не так

отпечатать("Потоки завершились")  # Сообщение о завершении работы потоков
'''
