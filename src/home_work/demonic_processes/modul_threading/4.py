'''
## Класс `Thread`

Одним из основных классов библиотеки `threading` в Python является
класс `Thread`. Он представляет собой отдельный поток выполнения
программы, позволяющий реализовать многопоточное поведение. Давайте
подробнее остановимся на методе `run()`, который является ключевым
элементом класса `Thread`.

### Метод `run()`

Методом `run()` определяется точка входа для нового потока. Когда
создается объект класса `Thread`, сам факт запуска потока инициируется
методом `start()`, однако реальная логика выполнения потока начинается
именно с метода `run()`.

#### Особенности метода `run()`:
- По умолчанию метод `run()` ничего не делает (его реализация пустая).
- Пользователь может переопределить этот метод, задав необходимую логику
    поведения потока.
- Обычно именно в методе `run()` помещают основной код, который поток
    должен выполнить.

### Пример с переопределением метода `run()`
'''
import threading
import time

class MyThread(threading.Thread):
    def __init__(self, message):
        super().__init__()
        self.message = message

    def run(self):
        """Переопределенный метод run(), содержащий основную логику"""
        print(f"Поток запущен: {self.message}")
        time.sleep(2)  # Пауза для демонстрации асинхронности
        print(f"Поток завершен: {self.message}")

# Создаем и запускаем несколько экземпляров нашего потока
thread1 = MyThread("Поток 1")
thread2 = MyThread("Поток 2")

# Запускаем потоки
thread1.start()
thread2.start()

# Ожидаем завершения обоих потоков
thread1.join()
thread2.join()

print("Все потоки завершились.")
'''

### Детали реализации:
- Здесь мы создаем подкласс `MyThread`, наследующийся от стандартного 
    класса `Thread`.
- Переопределяем метод `run()`, который определяет поведение потока: 
    сначала печатает сообщение о старте, потом ожидает некоторое время, 
    и наконец выводит сообщение о завершении.
- Затем создаем экземпляры наших потоков 
    и запускаем их методом `start()`.

### Важные замечания:
- Сам метод `run()` автоматически вызывается системой при запуске 
    потока методом `start()`.
- Метод `join()` используется для ожидания завершения потока перед 
    продолжением основного потока выполнения программы.

Таким образом, метод `run()` является ключевой частью организации 
потоков в Python, определяющей логику их работы и последовательность 
действий.
'''